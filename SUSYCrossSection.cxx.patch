Index: SUSYTools/Root/SUSYCrossSection.cxx
===================================================================
--- SUSYTools/Root/SUSYCrossSection.cxx	(revision 717006)
+++ SUSYTools/Root/SUSYCrossSection.cxx	(working copy)
@@ -1,5 +1,4 @@
 #include "SUSYTools/SUSYCrossSection.h"
-#include "PathResolver/PathResolver.h"
 #include <dirent.h>
 #include <math.h>
 #include <iostream>
@@ -8,32 +7,15 @@
 
 SUSY::CrossSectionDB::CrossSectionDB(const std::string& txtfilenameOrDir, bool usePathResolver) {
 
-    if (usePathResolver) {
-        std::string fullPath = PathResolverFindCalibDirectory(txtfilenameOrDir);
-
-        DIR* dp = opendir(fullPath.c_str());
-        if (dp) {
-            struct dirent * de;
-            while ((de = readdir(dp)) != NULL) {
-                loadFile(fullPath + de->d_name);
-            }
+    DIR* dp = opendir(txtfilenameOrDir.c_str());
+    if (dp) {
+        struct dirent * de;
+        while ((de = readdir(dp)) != NULL) {
+            loadFile(txtfilenameOrDir + de->d_name);
         }
-        else {
-            std::string fullPathToFile = PathResolverFindCalibFile(txtfilenameOrDir);
-            loadFile(fullPathToFile.c_str());
-        }
+    } else {
+        loadFile(txtfilenameOrDir.c_str());
     }
-    else {
-        DIR* dp = opendir(txtfilenameOrDir.c_str());
-        if (dp) {
-            struct dirent * de;
-            while ((de = readdir(dp)) != NULL) {
-                loadFile(txtfilenameOrDir + de->d_name);
-            }
-        } else {
-            loadFile(txtfilenameOrDir.c_str());
-        }
-    }
 
 }
 
