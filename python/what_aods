#!/bin/env python

############################################
#
# given a filelist generated by the script
# 'make_condor_filelists.py' this script
# will provide a list of the DAODs that
# were used to produce the susyNt files
#
# requirements:
#     fax: 'lsetup fax'
#     proxy: 'voms-proxy-init'
#
# daniel.joseph.antrim@cern.ch
# March 2017
#
############################################

from optparse import OptionParser # cmd line
import os # isfile
import sys # exit
import glob # for globbing
import ROOT # opening up them files
ROOT.PyConfig.IgnoreCommandLineOptions = True # don't let ROOT pick up the cmd-line
ROOT.gROOT.SetBatch(True)

def fax_is_setup() :

    print "Looking for FAX"
    if os.environ.get('STORAGEPREFIX') == None :
        print "ERROR FAX is not setup, you must set it up before running this script" 
        return False
    else :
        env = os.environ.get('STORAGEPREFIX')
        print " > FAX found: %s"%env
        return True

def proxy_setup() :
    print "Checking for valid proxy"
    default = ""
    proxy = os.getenv('X509_USER_PROXY', default)
    if proxy == default :
        print "ERROR proxy is not setup, please set one up before running this script"
        return False
    else :
        print " > proxy found: %s"%proxy
        return True

def get_lists_from_dir(input_dir) :

    # get the condor txt files
    if not input_dir.endswith("/") :
        input_dir = input_dir + "/"
    lists = glob.glob(input_dir + "*.txt")
    print "* Found %d filelists *"%len(lists)
    return lists

def get_first_filename(container_list) :

    out = ""
    lines = open(container_list).readlines()
    for line in lines :
        if not line : continue
        line = line.strip()
        out = line
        break
    return out

def get_original_input(susynt_file) :
    rfile = ROOT.TFile.Open(susynt_file)
    if not rfile :
        return ""
    else :
        input_container = rfile.Get("inputContainerName")
        return str(input_container.GetTitle())

def get_aod_list(input_lists) :

    aod_list = []
    for c in input_lists :
        #c = c.split("/")[-1]
        first_file = get_first_filename(c)
        if first_file == "" :
            print "WARNING Possible empty SusyNt: No input container found for %s"%c
            continue
        aod_container = get_original_input(first_file)
        aod_list.append(aod_container)
    return aod_list

def make_file(aods, directory) :

    print directory
    if not directory.endswith("/") :
        directory = directory + "/"
    dir_for_out = directory.split("/")[-2]
    outname = "input_aods_%s.txt"%dir_for_out

    ofile = open(outname, 'w')
    for aod in aods :
        ofile.write(str(aod) + "\n")
    ofile.closed

    print 55*"*"
    print "Filelist of input (D)AODs for SusyNt in %s saved: %s"%(directory, outname)
    print 55*"*"


#_____________________________________________________________________________
if __name__ == "__main__" :

    parser = OptionParser()
    parser.add_option("-i", "--input", default="")
    (options, args) = parser.parse_args()
    input_directory = options.input

    if not fax_is_setup() :
        sys.exit(1)

    if not proxy_setup() :
        sys.exit(1)

    if not os.path.isdir(input_directory) :
        print "ERROR Cannot find specified path: %s"%input_directory
        sys.exit(1)
    else :
        print "Opening up directory: %s"%input_directory

    input_lists = get_lists_from_dir(input_directory)
    aod_list = get_aod_list(input_lists)
    make_file(aod_list, input_directory) 
